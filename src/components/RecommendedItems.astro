---
const { type, tag, page } = Astro.props;

import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import Enumerable from "linq";

const allMediaCollection = await getCollection("recommendations");

import {
  getTypeTitle,
  getTagUrlFragment,
  getTagName,
} from "@utils/recommended";

const items = Enumerable.from(allMediaCollection)
  .select((i) => ({ ...i.data, slug: i.slug }))
  .toArray();

const types = Enumerable.from(items)
  .groupBy((i) => i.type)
  .select((i) => i.first().type)
  .toArray();

function getTypeIcon(type: string) {
  switch (type.toLowerCase()) {
    case "podcast":
      return "fa-sharp fa-podcast";
    case "tv":
      return "fa-sharp fa-tv-retro";
    case "music":
      return "fa-sharp fa-music-note";
    case "app":
      return "fa-brands fa-app-store";
    case "movie":
      return "fa-sharp fa-camera-movie";
    default:
      return "";
  }
}

function getTagsForType() {
  if (!type) return undefined;
  return Enumerable.from(items)
    .where((j) => j.type === Astro.props.type && !!j.tags)
    .selectMany((j) => j.tags as Array<string>)
    .groupBy((j) => getTagName(j))
    .select((jg) => jg.key())
    .orderBy(t => t)
    .toArray();
}

const pageSize = 24;

const filteredItems = Enumerable.from(items)
      .where((i) => !type || i.type === type)
      .where((i) => !tag || !!i.tags?.some((t : any) => getTagName(t) == tag))
      .orderBy((i) =>
        !tag ? 0 : i.tags!.find((t : any) => getTagName(t) === tag).rank
      )
      .thenByDescending((i) => i.date).toArray();
---

<div class="filter-bar">
  <a class:list={["badge", { active: !type }]} href="/recommended/">
    <i class={"fa-sharp fa-solid fa-circle-star"}></i>
    All Types
  </a>
  {
    types.map((i) => (
      <a
        class:list={["badge", { active: i === type }]}
        href={`/recommended/${getTypeTitle(i).toLowerCase()}/`}
      >
        <i class:list={["fa-solid", getTypeIcon(i)]} />
        {getTypeTitle(i)}
      </a>
    ))
  }
</div>

{
  (getTagsForType()?.length ?? 0) > 0 && (
    <div class="filter-bar sm">
      <a
        class:list={["badge", { active: !tag }]}
        href={`/recommended/${getTypeTitle(type).toLowerCase()}/`}
      >
        All
      </a>
      {getTagsForType()!.map((i) => (
        <a
          class:list={["badge", { active: i === tag }]}
          href={`/recommended/${getTypeTitle(type).toLowerCase()}/${getTagUrlFragment(i as string)}/`}
        >
          {i}
        </a>
      ))}
    </div>
  )
}

<div class:list={["items", (type ?? "").toLowerCase()]}>
  {
    Enumerable.from(filteredItems)
      .skip(page > 0 ? pageSize * (page-1) : 0)
      .take(page > 0 ? pageSize : items.length)
      .toArray()
      .map((i, index) => {
        const large = filteredItems.length < 11 || index < 6;
        return (
          <div class:list={["item", { large }]}>
            {tag && i.tags!.find((t: any) => t.name === tag)?.rank && (
              <div class="rank">
                {i.tags!.find((t: any) => t.name === tag)?.rank}
              </div>
            )}

            <a href={i.link} target="_blank" class="art">
              <Image
                transition:name={`recommend-item-image-${i.slug}`}
                src={i.image}
                alt={i.title}
                width={large ? 500 : 80}
                densities={[1.5, 2]}
              />
            </a>
            <div class="content">
              <a
                href={i.link}
                target="_blank"
                transition:name={`recommend-item-title-${i.slug}`}
              >
                <strong>{i.title}</strong>
                {(i.subtitle || i.year) && (
                  <small>
                    {i.subtitle}
                    {i.year && <>({i.year})</>}
                  </small>
                )}
              </a>
              <div
                class="badges"
                transition:name={`recommend-item-badges-${i.slug}`}
              >
                {!type && (
                  <span class="badge type">
                    <i class:list={["fa-solid", getTypeIcon(i.type)]} />
                    {i.type}
                  </span>
                )}

                {i.tags?.map((t: string) => (
                  <span class="badge">{getTagName(t)}</span>
                ))}
              </div>
            </div>
          </div>
        );
      })
  }
</div>

<style lang="scss">
  .items {
    display: grid;
    gap: 15px;
    grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));

    &.movie .item img {
      aspect-ratio: 1/1.5;
    }

    &.music .item img,
    &.podcast .item img {
      aspect-ratio: 1;
    }

    &.app {
      .item img {
        border-radius: 20px;
        aspect-ratio: 1;
      }

      .item.large img {
        border-radius: 35px;
      }
    }
  }

  .item {
    display: flex;
    gap: 10px;
    align-items: stretch;
    background: var(--color-subcard-background);
    padding: 10px;
    border-radius: 10px;
    position: relative;

    .content {
      display: flex;
      flex-direction: column;
      gap: 5px;
      justify-content: space-between;

      strong,
      small {
        line-height: 1.2;
        display: block;
      }

      strong {
        margin-bottom: 5px;
      }
    }

    .badges {
      display: flex;
      gap: 2px;
      flex-wrap: wrap;
    }

    img {
      aspect-ratio: 1/1.05;
      height: inherit;
      object-fit: cover;
      transition: all 0.2s;
      border-radius: 6px;
    }

    a {
      text-decoration: none;
    }

    .art {
      line-height: 0;
    }

    &.large {
      flex-direction: column;

      img {
        width: 100%;
      }

      .rank {
        padding: 6px 20px;
        font-size: 1.6em;
        padding: 5px 16px;
      }
    }

    .rank {
      background: var(--color-rank-background);
      backdrop-filter: blur(15px);
      -webkit-backdrop-filter: blur(15px);
      position: absolute;
      z-index: 100;
      padding: 5px 11px;
      border-radius: 50%;
      top: -10px;
      left: -10px;
      font-weight: bolder;
      font-size: 1.2em;
      text-align: center;
      min-width: 20px;
    }
  }

  .badge {
    border-radius: 15px;
    padding: 3px 8px;
    background: var(--color-background-light);
    font-size: 0.65em;
    font-weight: 400;
    text-decoration: none;
    border: 1px solid var(--color-background-dark);
  }

  .badge.type {
    font-weight: 800;
  }

  .badge.active {
    background: var(--color-secondary);
    color: var(--color-card-background);
  }

  .filter-bar {
    margin-bottom: 20px;
    display: flex;
    gap: 6px;
    font-size: calc(1em + 1.25vw);
    justify-content: center;
    flex-wrap: wrap;

    &.sm {
      font-size: 1.25em;

      .badge {
        line-height: 1;
        padding: 8px 14px;
      }

      .badge.active {
        background: var(--color-primary);
      }
    }

    i {
      font-size: 1.4em;
    }

    .badge {
      padding: 6px 13px;
      border-radius: 20px;
      box-shadow: 0 0 2px var(--color-text-very-light);
      display: flex;
      gap: 6px;
      align-items: center;
      line-height: 0;
    }

    .badge.active {
      box-shadow: 0 0 2px var(--color-text-muted);
    }
  }

  @media screen and (min-width: 950px) {
    .filter-bar {
      font-size: 1.75em;
    }
  }
</style>
